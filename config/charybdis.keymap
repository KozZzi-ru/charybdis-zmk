#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homewrow_mods_left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 53 54 55 56 57>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 2 3 4 5>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-on-release;
        };

        tap_preferred: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <40>;
            flavor = "tap-preferred";
        };

        // Новое поведение для ввода фразы
        phrase_proshu: phrase_proshu {
            compatible = "zmk,behavior-macro";
            label = "phrase_proshu";
            #binding-cells = <0>;
            bindings = 
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N0>, <&macro_release &kp LALT>, // П
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N0>, <&macro_release &kp LALT>, // р
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N6 &kp KP_N5>, <&macro_release &kp LALT>, // о
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N8>, <&macro_release &kp LALT>, // ш
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N3>, <&macro_release &kp LALT>, // у
                <&macro_tap &kp SPACE>,
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N0>, <&macro_release &kp LALT>, // р
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N3 &kp KP_N0>, <&macro_release &kp LALT>, // а
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N1>, <&macro_release &kp LALT>, // с
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N4 &kp KP_N1>, <&macro_release &kp LALT>, // с
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N6 &kp KP_N5>, <&macro_release &kp LALT>, // м
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N6 &kp KP_N6>, <&macro_release &kp LALT>, // о
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N5 &kp KP_N5>, <&macro_release &kp LALT>, // т
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N5 &kp KP_N0>, <&macro_release &kp LALT>, // р
                <&macro_press &kp LALT>, <&macro_tap &kp KP_N0 &kp KP_N4 &kp KP_N5 &kp KP_N1>, <&macro_release &kp LALT>, // е
                <&macro_tap &kp DOT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        minus {
            bindings = <&kp MINUS>;
            key-positions = <31 30>;
        };

        par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <31 32>;
        };

        par2 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <27 28>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <42 43>;
        };

        bra {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <15 16>;
        };

        right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 20>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <40 41>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <18 19>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        LAYER_BT {
            bindings = <&mo 6>;
            key-positions = <36 47>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <10 22>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <11 23>;
        };

        pg_up {
            bindings = <&kp PAGE_UP>;
            key-positions = <10 11>;
        };

        pg_dn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <22 23>;
        };

        ar_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <34 35>;
        };

        ar_dn {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <46 47>;
        };

        ar_lt {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <34 46>;
        };

        al_rt {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <35 47>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <39 40>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <43 44>;
        };

        logoff {
            bindings = <&kp LG(L)>;
            key-positions = <0 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp GRAVE              &kp N1       &kp N2        &kp N3    &kp N4     &kp N5      &kp N6  &kp N7  &kp N8     &kp N9     &kp N0         &kp MINUS
&kp TAB                &kp Q        &kp W         &kp E     &kp R      &kp T       &kp Y   &kp U   &kp I      &kp O      &kp P          &kp LEFT_BRACKET
&kp LSHFT              &kp A        &kp S         &kp D     &kp F      &kp G       &kp H   &kp J   &kp K      &kp L      &kp SEMI       &kp APOS
&kp LCTRL              &kp Z        &kp X         &kp C     &kp V      &kp B       &kp N   &kp M   &kp COMMA  &kp DOT    &kp FSLH       &kp RSHIFT
&lt 1 C_AL_CALCULATOR  &lt 5 ENTER  &kp LEFT_ALT  &kp LGUI  &kp SPACE                      &trans  &trans     &kp ENTER  &kp BACKSPACE  &kp RIGHT_SHIFT
            >;
        };

        num_and_fun {
            bindings = <
&trans  &kp F1  &kp F2          &kp F3          &kp F4           &kp F5       &trans           &trans           &trans           &trans        &trans         &trans
&trans  &kp F6  &kp F7          &kp F8          &kp F9           &kp F10      &phrase_proshu   &kp NUMBER_4     &kp N5           &kp NUMBER_6  &kp KP_DIVIDE  &kp ASTERISK
&trans  &trans  &kp HOME        &kp UP_ARROW    &kp END          &kp F11      &none            &kp NUMBER_1     &kp NUMBER_2     &kp NUMBER_3  &kp MINUS      &kp RS(EQUAL)
&trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F12      &kp KP_NUMBER_0  &kp KP_NUMBER_0  &kp KP_NUMBER_0  &kp KP_DOT    &kp EQUAL      &kp LEFT_ALT
&trans  &trans  &trans          &trans          &trans                                         &trans           &trans           &trans
            >;
        };

        // ... остальные слои остаются без изменений ...
    };
};
